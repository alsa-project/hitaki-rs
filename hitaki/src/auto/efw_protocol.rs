// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib;
use glib::object::IsA;
use glib::translate::*;
use hitaki_sys;
use std::fmt;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct EfwProtocol(Interface<hitaki_sys::HitakiEfwProtocol>);

    match fn {
        get_type => || hitaki_sys::hitaki_efw_protocol_get_type(),
    }
}

pub const NONE_EFW_PROTOCOL: Option<&EfwProtocol> = None;

pub trait EfwProtocolExt: 'static {
    fn receive_response(&self, buffer: &[u8]);

    fn transmit_request(
        &self,
        category: u32,
        command: u32,
        args: &[u32],
    ) -> Result<u32, glib::Error>;
}

impl<O: IsA<EfwProtocol>> EfwProtocolExt for O {
    fn receive_response(&self, buffer: &[u8]) {
        let length = buffer.len() as usize;
        unsafe {
            hitaki_sys::hitaki_efw_protocol_receive_response(
                self.as_ref().to_glib_none().0,
                buffer.to_glib_none().0,
                length,
            );
        }
    }

    fn transmit_request(
        &self,
        category: u32,
        command: u32,
        args: &[u32],
    ) -> Result<u32, glib::Error> {
        let arg_count = args.len() as usize;
        unsafe {
            let mut resp_seqnum = mem::MaybeUninit::uninit();
            let mut error = ptr::null_mut();
            let _ = hitaki_sys::hitaki_efw_protocol_transmit_request(
                self.as_ref().to_glib_none().0,
                category,
                command,
                args.to_glib_none().0,
                arg_count,
                resp_seqnum.as_mut_ptr(),
                &mut error,
            );
            let resp_seqnum = resp_seqnum.assume_init();
            if error.is_null() {
                Ok(resp_seqnum)
            } else {
                Err(from_glib_full(error))
            }
        }
    }
}

impl fmt::Display for EfwProtocol {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "EfwProtocol")
    }
}
