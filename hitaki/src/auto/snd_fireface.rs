// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::AlsaFirewire;
use crate::TimestampedQuadletNotification;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    /// A GObject-derived object for sound unit of RME Fireface series.
    ///
    /// The [`SndFireface`][crate::SndFireface] is object class derived from `GObject::Object` for sound unit of
    /// RME Fireface series supported by ALSA fireface driver (`snd-fireface`).
    ///
    /// # Implements
    ///
    /// [`AlsaFirewireExt`][trait@crate::prelude::AlsaFirewireExt], [`TimestampedQuadletNotificationExt`][trait@crate::prelude::TimestampedQuadletNotificationExt]
    #[doc(alias = "HitakiSndFireface")]
    pub struct SndFireface(Object<ffi::HitakiSndFireface, ffi::HitakiSndFirefaceClass>) @implements AlsaFirewire, TimestampedQuadletNotification;

    match fn {
        type_ => || ffi::hitaki_snd_fireface_get_type(),
    }
}

impl SndFireface {
    pub const NONE: Option<&'static SndFireface> = None;

    /// Instantiate [`SndFireface`][crate::SndFireface] object and return the instance.
    ///
    /// # Returns
    ///
    /// an instance of [`SndFireface`][crate::SndFireface].
    #[doc(alias = "hitaki_snd_fireface_new")]
    pub fn new() -> SndFireface {
        unsafe { from_glib_full(ffi::hitaki_snd_fireface_new()) }
    }
}

impl Default for SndFireface {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for SndFireface {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SndFireface")
    }
}
