// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::IsA;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "HitakiMotuRegisterDsp")]
    pub struct MotuRegisterDsp(Interface<ffi::HitakiMotuRegisterDsp, ffi::HitakiMotuRegisterDspInterface>);

    match fn {
        type_ => || ffi::hitaki_motu_register_dsp_get_type(),
    }
}

impl MotuRegisterDsp {
    pub const NONE: Option<&'static MotuRegisterDsp> = None;
}

pub trait MotuRegisterDspExt: 'static {
    //#[doc(alias = "hitaki_motu_register_dsp_read_byte_meter")]
    //fn read_byte_meter(&self, meter: /*Unimplemented*/FixedArray TypeId { ns_id: 0, id: 3 }; 48) -> Result<(), glib::Error>;
}

impl<O: IsA<MotuRegisterDsp>> MotuRegisterDspExt for O {
    //fn read_byte_meter(&self, meter: /*Unimplemented*/FixedArray TypeId { ns_id: 0, id: 3 }; 48) -> Result<(), glib::Error> {
    //    unsafe { TODO: call ffi:hitaki_motu_register_dsp_read_byte_meter() }
    //}
}

impl fmt::Display for MotuRegisterDsp {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("MotuRegisterDsp")
    }
}
