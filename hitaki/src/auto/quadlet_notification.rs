// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectExt;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "HitakiQuadletNotification")]
    pub struct QuadletNotification(Interface<ffi::HitakiQuadletNotification, ffi::HitakiQuadletNotificationInterface>);

    match fn {
        type_ => || ffi::hitaki_quadlet_notification_get_type(),
    }
}

impl QuadletNotification {
    pub const NONE: Option<&'static QuadletNotification> = None;
}

pub trait QuadletNotificationExt: 'static {
    #[doc(alias = "notified")]
    fn connect_notified<F: Fn(&Self, u32) + 'static>(&self, f: F) -> SignalHandlerId;

    fn emit_notified(&self, message: u32);
}

impl<O: IsA<QuadletNotification>> QuadletNotificationExt for O {
    fn connect_notified<F: Fn(&Self, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notified_trampoline<
            P: IsA<QuadletNotification>,
            F: Fn(&P, u32) + 'static,
        >(
            this: *mut ffi::HitakiQuadletNotification,
            message: libc::c_uint,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(
                QuadletNotification::from_glib_borrow(this).unsafe_cast_ref(),
                message,
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notified\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notified_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn emit_notified(&self, message: u32) {
        self.emit_by_name::<()>("notified", &[&message]);
    }
}

impl fmt::Display for QuadletNotification {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("QuadletNotification")
    }
}
