// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectExt;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_sys;
use gobject_sys;
use hitaki_sys;
use libc;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct QuadletNotification(Interface<hitaki_sys::HitakiQuadletNotification>);

    match fn {
        get_type => || hitaki_sys::hitaki_quadlet_notification_get_type(),
    }
}

pub const NONE_QUADLET_NOTIFICATION: Option<&QuadletNotification> = None;

pub trait QuadletNotificationExt: 'static {
    fn connect_notified<F: Fn(&Self, u32) + 'static>(&self, f: F) -> SignalHandlerId;

    fn emit_notified(&self, message: u32);
}

impl<O: IsA<QuadletNotification>> QuadletNotificationExt for O {
    fn connect_notified<F: Fn(&Self, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notified_trampoline<P, F: Fn(&P, u32) + 'static>(
            this: *mut hitaki_sys::HitakiQuadletNotification,
            message: libc::c_uint,
            f: glib_sys::gpointer,
        ) where
            P: IsA<QuadletNotification>,
        {
            let f: &F = &*(f as *const F);
            f(
                &QuadletNotification::from_glib_borrow(this).unsafe_cast_ref(),
                message,
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notified\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notified_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn emit_notified(&self, message: u32) {
        let _ = unsafe {
            glib::Object::from_glib_borrow(self.as_ptr() as *mut gobject_sys::GObject)
                .emit("notified", &[&message])
                .unwrap()
        };
    }
}

impl fmt::Display for QuadletNotification {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "QuadletNotification")
    }
}
